type VoteOption = 
 variant {
   against;
   for;
 };
type Vote = 
 record {
   voteOption: VoteOption;
   voter: principal;
   votingPower: nat;
 };
type UpdateGovernorSystemParamsPayload = 
 record {
   guardian: opt principal;
   metadata: opt GovernorMetadata;
   proposalThreshold: opt nat;
   quorumThreshold: opt nat;
   timelockDelayNs: opt nat;
   votingDelayNs: opt nat;
   votingPeriodNs: opt nat;
 };
type Time = int;
type Result = 
 variant {
   err: text;
   ok: Proposal;
 };
type ProposalStatus = 
 variant {
   approved;
   executed;
   open;
   pending;
   queued: Time;
   rejected: variant {
               cancelled;
               quorumNotMet;
               rejectedByMajority;
             };
 };
type ProposalPayload = 
 record {
   canisterId: principal;
   data: blob;
   method: text;
 };
type ProposalContent = 
 record {
   description: opt text;
   title: text;
 };
type Proposal = 
 record {
   cancelledAt: opt Time;
   content: ProposalContent;
   createdAt: Time;
   executedAt: opt Time;
   id: nat;
   payload: ProposalPayload;
   proposer: principal;
   quorumThreshold: nat;
   status: ProposalStatus;
   timelockedAt: opt Time;
   votes: List;
 };
type List = 
 opt record {
       Vote;
       List;
     };
type GovernorSystemParams = 
 record {
   guardian: opt principal;
   metadata: opt GovernorMetadata;
   proposalThreshold: nat;
   quorumThreshold: nat;
   timelockDelayNs: nat;
   votingDelayNs: nat;
   votingPeriodNs: nat;
 };
type GovernorMetadata = 
 record {
   description: text;
   name: text;
 };
type GovernorInitArgs = 
 record {
   ledgerCanisterId: principal;
   systemParams: GovernorSystemParams;
 };
type Governor = 
 service {
   cancel: (nat) -> (Result);
   castVote: (nat, VoteOption) -> (Result);
   execute: (nat) -> (Result);
   getPastTotalSupply: (Time) -> (nat);
   getPastVotes: (principal, Time) -> (nat);
   getProposal: (nat) -> (Result) query;
   getProposals: () -> (vec Proposal) query;
   getSystemParams: () -> (GovernorSystemParams) query;
   propose: (ProposalContent, ProposalPayload) -> (Result);
   updateSystemParams: (UpdateGovernorSystemParamsPayload) -> ();
 };
service : (GovernorInitArgs) -> Governor
